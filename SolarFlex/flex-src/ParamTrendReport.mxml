<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns="*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="500"
	title="{pannelTitle}" layout="absolute" 
	xmlns:charts="org.axiis.charts.*" 
	creationComplete="init();"
	xmlns:axiis="http://www.axiis.org/2009"
	xmlns:series="org.axiis.charts.series.*"
	xmlns:groupings="org.axiis.charts.groupings.*"
	xmlns:degrafa="http://www.degrafa.com/2007"
	xmlns:states="org.axiis.states.*"
	xmlns:paint="org.axiis.paint.*"
	xmlns:Examples="Examples.*"
	xmlns:axis="org.axiis.charts.axis.*"
	xmlns:labels="org.axiis.charts.labels.*" showCloseButton="true"
	xmlns:utils="org.axiis.utils.*" close="closeHandler();" >      
    <!--mx:Style source="styles/Axiis_Examples.css"/-->	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.collections.XMLListCollection;
			[Bindable] public var machineId:String = "00000001";
			[Bindable] public var limit:String = "100";
			[Bindable] public var columnName:String = "";
			[Bindable] public var paramNames:String = "";
			[Bindable] public var serverIpAndPort:String = "180.179.36.118:8080";
			[Bindable] public var payload:String = "";
			[Bindable] public var pannelTitle:String = "";
		
			import org.axiis.data.DataSet;

			private var ds:DataSet = new DataSet();
			
			public function init():void
			{
				pannelTitle = "Trend Report ("+paramNames+")";
				liveMachineService.url = "http://"+serverIpAndPort+"/SolarService/report/machines/last/"+machineId+"/"+paramNames+"/"+columnName+"/100.xml"
				liveMachineService.send();				
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, callService);
		        timer.start();
			}
			
			/*public function getPoints(event:Event):void
			{
				var points:String = pointId.selectedLabel.toString();
				pannelTitle = "Trend Report ("+paramNames+")";
				liveMachineService.url = "http://"+serverIpAndPort+"/SolarService/report/machines/last/"+machineId+"/"+paramNames+"/"+columnName+"/"+points+".xml"
				liveMachineService.send();				
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, callService);
		        timer.start();
			}*/
			
			
			public function start():void
			{
				ds.processCsvAsTable(payload, false);
				//ds.processCsvAsTable(paramData.toXMLString(), false);
				ds.pivotTable(0);
				dataProvider = ds.data.pivot.rows;
				//Alert.show("ds.data.pivot.header.slice(1,dataSlice.value+1..."+ataSlice.value);
				hScale.dataProvider=ds.data.pivot.header.slice(1,dataSlice.value+1);
				hAxis.invalidateDataProvider();
				dc.invalidateDisplayList();
			}
			 
			private function closeHandler():void{
				timer.stop();
				PopUpManager.removePopUp(this);
			} 
			private function sliceData():void {
				hScale.dataProvider=ds.data.pivot.header.slice(1,dataSlice.value+1);
				hAxis.invalidateDataProvider();
				myLineGroup.invalidateDataProvider();
				dc.invalidateDisplayList(); 
			}

			private function axisLabel(obj:Object):String
			{
				return Number(obj).toString();
			}
			
			private function filterColumns(obj:Object):Boolean
			{
				if (obj.index < 1 || obj.index > dataSlice.value)
					return false;
				else
					return true;
			}

			private function filterRows(obj:Object):Boolean
			{
				return true;
			}
			
			[Bindable]
        	private var paramData:XMLListCollection = null;
        	private var timer:Timer = new Timer(60000);    
			
		   	private function callService(e:TimerEvent):void
		   	{
			   if (machineId != null){
			   		liveMachineService.url = "http://"+serverIpAndPort+"/SolarService/report/machines/last/"+machineId+"/"+paramNames+"/"+columnName+"/100.xml"
					liveMachineService.send();
			   }
		   	}

	        private function tempResultHandler(event:ResultEvent):void
			{
				var xmlList:XMLList = XML(event.result).children();
				paramData =  new XMLListCollection(xmlList);//.getItemAt(8));
				payload = paramData.getItemAt(0).toString();
				start();
			}
			
			public function httpFault(event:FaultEvent):void {
				timer.start();
                var faultstring:String = event.fault.faultString;
            }
	
            
		]]>
	</mx:Script>
	
	<mx:HTTPService id="liveMachineService" useProxy="false" method="GET" resultFormat="e4x" 
		result="tempResultHandler(event)" fault="httpFault(event)"/>
	
	
	<!-- places a convenient background on the chart -->

	<!--  GLOBAL VARIABLES -->
	<mx:Object id="dataProvider"/>
	<mx:String id="verticalField"/>
	<mx:Number id="percentGap">.02</mx:Number>

	<utils:NumericExpression id="tension" value="{slider.value/210}" valueChanged="{if (myLineGroup) dc.invalidateDisplayList();}"/>

	<!--
	For example, this markup will populate two labels with the text "true" but (a || b || c || d || e || true) will only have been evaluated once.
	                 
	<BooleanExpression id="be0" value="{a || b || c || d || e || true}" />
	<mx:Label text="{be0.value}" />
	<mx:Label text="{be0.value}" />
	-->
	<axiis:LinearScale id="vScale"
		dataProvider="{dataProvider}"
		minLayout="0" minValue="0"
		maxLayout="{myLineGroup.height}"
		/>
	<axiis:CategoricalScale id="hScale"
		minLayout="5"
		maxLayout="{myLineGroup.width}"
	 />
	<axiis:DataCanvas width="80%" height="100%"
		id="dc"
		top="10"
		bottom="5"
		horizontalCenter="0"
		strokes="{strokes}"
		fills="{fills}"
		showDataTips="true">

		<!-- Background 100 -->
		<!-- backgrounds appear behind the graph. There are also foregroundGeometries for doing annotations on top of the graph 
			verticalScale="{vScale}"			The vertical scale used for scaling data to actual screen units		
			tickStroke="{axisStroke}"			The stroke used to put the hash or tick marks on an axis
			width="{dc.width}"
			height="{myLineGroup.height}"
			showDataTips="false"				A flag that indicates to DataCanvas that it should listen for mouse events that signal the need to create a data tip.
			showGridArea="false"				Whether or not the grid cells are displayed
			showGridLine="false"				Whether or not lines are drawn between grid cells
			showLabels="false"					Whether or not to show labels on the axis
			fontFamily="Myriad Pro"
			fontColor="0"
			fontSize="14"
			tickGap="5"
			majorTickSpacing="50"				The space between successive major tick marks. There is also a minorTickSpacing. Length of marks can be adjusted as well majorTickLength
			labelFunction="{axisLabel}"			A function that is used to determine how each item in the dataProvider should be labeled along the axis.
		-->
		<axiis:backgroundGeometries>
			<axis:VAxis 
				id="vAxis"
				verticalScale="{vScale}"
				tickStroke="{axisStroke}"
				width="{dc.width}"
				height="{myLineGroup.height}"
				showDataTips="false"
				fontFamily="Myriad Pro"
				fontColor="0"
				fontSize="14"
				tickGap="5"
				majorTickSpacing="50"/>
			<axiis:HCategoryAxis 
				id="hAxis"
				x="{myLineGroup.x}"
				categoryScale="{this.hScale}"
				width="{myLineGroup.width}"
				dataProvider="{hScale.dataProvider}"
				height="50"
				visible="false"
				y="{myLineGroup.height}"/>
			<!-- this is the actual x axis line -->
			<degrafa:Line 
				x="0"
				x1="{myLineGroup.x+myLineGroup.width}"
				y="{myLineGroup.height}"
				y1="{myLineGroup.height}"
				stroke="{axisStroke}"/>
		</axiis:backgroundGeometries>
		<axiis:layouts>
		
			<!-- LineSeriesGroup
				 Line series group renders multiple lines for a series of data points. This can be used to create visualizations that use curved surfaces such as stream graphs and line charts.
				 
					x="12"											x-location relative to paren
					y="0"											y-location relative to parent
					height="{dc.height-70}"							height of display essentially
					width="{dc.width}"								width
					tension="{tension.value}"						The tension used to render the curves in this chart. A value of 0 results in straight lines while a value of 1 results in exaggerated Bezier curves.
					markerColor="{areaPalette.currentColor}"		The color at the center of the markers.		
					dataFilterFunction="{filterRows}"				This provides a way to further refine a layouts dataProvider by providing access to a custom filter data filter function. 
																	This allows developers to easily visualize subsets of the data without having to change the underlying data structure. 
					showArea="{area.selected}"						Whether the area beneath the lines should be filled.
					plotFilterFunction="{filterColumns}"			A filter function that will be used to determine whether a given data point should be included in the rendering.			
					markerSize="8"									The diameter in pixels of the markers shown at each data point.			
					showMarker="{showMarker.selected}"				Whether or not markers should be displayed at each data point
					mode="{int(layoutGroup.selectedValue)}"			The layout mode used to render the lines. One of {MODE_BASELINE,MODE_STACK_ZERO,MODE_STACK_FLOW}.	
					dataProvider="{dataProvider}"					EG: var myLines is an ArrayCollection || Array of Line
																		Line is an object that has a name property, a plotPointsCollection property of PlotPoint, and an optional index which would be it's order in myLines
																		PlotPoint is an object with an index property, an xvalue property used for display of text or the x-value, and a yvalue property which is the y-value
					plotCollection="columns"						The name of the property on the objects in the dataProvider that contains the data to plot 
																	It is expected that the plot collection is a collection of objects - like Array or ArrayCollection and contains the series of data to be plotted. 
																	i.e. dataProvider=myLines is Array || ArrayCollection myLines[0].myPlotCollection is Array || ArrayCollection
					dataField="value"								The property within each item in the dataProvider that contains the field used to determine the value of the item. (essentially the y value)							
					labelField="pivotName"							The property within each item in the dataProvider that contains the field used to determine the label for the item.
					xDataField="name"								The property within each item in the dataProvider that contains the field used to determine the value of the item on the horizontal axis.
					plotLabelField="name"							The property on the items in the dataProvider that contains the label field for the entire plot.				
					verticalScale="{vScale}"						The vertical scale, IScale, used to scale data values to chart values 
					horizontalScale="{hScale}"						The horizontal scale, IScale, used to scale data values to chart values
					stroke="{myStroke}"								The stroke used to render lines
					fill="{areaFill}"								The fill used to render the area beneath the lines if area rendering is enabled.
					enableRollOver="true"							Turns on/off the default roll-over state
					currentDatum									The item in the dataProvider that the layout is currently rendering.
					currentIndex									The index of the item in the dataProvider that the layout is currently rendering.
					currentLabel									The label of the item in the dataProvider that the layout is currently rendering, as determine by taking currentDatum[labelField], if a labelField is defined.
					currentReference								The geometry that is being used to render the current data item as it appears after the necessary iterations of the referenceRepeater have been executed.
					currentValue									The value of the item in the dataProvider that the layout is currently rendering, as determined by taking currentDatum[dataField], if a dataField is defined.								
			-->
			<groupings:LineSeriesGroup id="myLineGroup"
				x="12"
				y="0"
				height="{dc.height-70}"
				width="{dc.width}"
				tension="{tension.value}"
				markerColor="{areaPalette.currentColor}"		
				dataFilterFunction="{filterRows}"
				showArea="{area.selected}"
				plotFilterFunction="{filterColumns}"
				markerSize="8"
				showMarker="{showMarker.selected}"
				mode="{int(layoutGroup.selectedValue)}"
				dataProvider="{dataProvider}"
				plotCollection="columns"
				dataField="value"
				labelField="pivotName"
				xDataField="name"
				plotLabelField="name"
				verticalScale="{vScale}"
				horizontalScale="{hScale}"
				stroke="{myStroke}"
				fill="{areaFill}"
				 enableRollOver="true"/>
				 
		</axiis:layouts>
		
	</axiis:DataCanvas>
	<mx:Array id="palettes">
		<paint:LayoutAutoPalette id="outerPalette" layout="{myLineGroup}" colorFrom="0xCC3333" colorTo="0x3333CC"/>
		<paint:LayoutAutoPalette id="clusterPalette" layout="{myLineGroup}" colorFrom="{outerPalette.currentColor}" colorTo="{outerPalette.currentColor | 0x337f00}"/>
		<paint:LayoutAutoPalette id="areaPalette" layout="{myLineGroup}" colorFrom="0x3333CC" colorTo="0xCC3333"/>
	</mx:Array>
	
	<mx:Array id="fills">
		<degrafa:LinearGradientFill id="areaFill" angle="90" enableEvents="false">
			<degrafa:GradientStop color="{areaPalette.currentColor}" alpha=".95"/>
			<degrafa:GradientStop color="{areaPalette.currentColor | 0x999933}" alpha=".65"/>
		</degrafa:LinearGradientFill>
		<degrafa:LinearGradientFill id="clusterFill" angle="45" enableEvents="false">
			<degrafa:GradientStop color="{clusterPalette.currentColor}"/>
			<degrafa:GradientStop color="{clusterPalette.currentColor | 0xFFFFFF}" alpha=".85"/>
		</degrafa:LinearGradientFill>
	</mx:Array>
	
	<mx:Array id="strokes">
		<degrafa:LinearGradientStroke id="colStroke" pixelHinting="true" angle="45" enableEvents="false">
			<degrafa:GradientStop color="0xFFFFFF" alpha=".7"/>
			<degrafa:GradientStop color="0xFFFFFF" alpha=".3"/>
		</degrafa:LinearGradientStroke>
		<degrafa:SolidStroke 
			color="0xFFFFFF" 
			alpha=".3"/>
		<degrafa:SolidStroke 
			id="axisStroke" 
			color="0x222222"  
			pixelHinting="true"/>
		<degrafa:SolidStroke
			id="myStroke"
			color="{areaPalette.currentColor}"
			weight="1"
			alpha="1"
			caps="none"
			pixelHinting="true"/>
	</mx:Array>

	<!-- DISPLAY OBJECTS -->

	<mx:HBox id="myBox" bottom="0" horizontalCenter="0">
		<mx:HBox visible="false">
			<mx:Label text="% Data" textAlign="right" verticalCenter="0"/>
			<mx:HSlider
				id="dataSlice"
				width="80"
				minimum="3"
				maximum="220"
				value="100"
				snapInterval="1"
				change="{sliceData();}"
				showTrackHighlight="false"
				verticalCenter="-5"/>
		</mx:HBox>
		<mx:HBox>
			<mx:Label text="Line Curve" textAlign="right" verticalCenter="0"/>
			<mx:HSlider width="80"
				id="slider"
				minimum="1"
				maximum="80"
				value="35"
				liveDragging="true"
				showTrackHighlight="false"
				verticalCenter="-5"/>
		</mx:HBox>		
		<mx:Label text="|"/>
		<mx:HBox>
			<mx:Label text="Area" textAlign="right" verticalCenter="0"/>
			<mx:CheckBox id="area" change="{dc.invalidateDisplayList();}" selected="true"/>
		</mx:HBox>
		<mx:Label text="|"/>
		<mx:HBox>
			<mx:Label text="Marker" textAlign="right" verticalCenter="0"/>
			<mx:CheckBox id="showMarker" change="{dc.invalidateDisplayList();}" selected="true"/>
		</mx:HBox>
		
		<!--mx:HBox >
			<mx:Label width="25%" text="Last :" textAlign="right" fontWeight="bold"/>
			<mx:ComboBox id="pointId" prompt="100" change="getPoints(event)"> 
			      <mx:ArrayCollection>
			         <mx:Object label="100" data="1oo"/>
			          <mx:Object label="250" data="250"/>
			         <mx:Object label="500" data="500"/>
			          <mx:Object label="750" data="750"/>
			         <mx:Object label="1000" data="1000"/>
			          <mx:Object label="1500" data="1500"/>
			          <mx:Object label="2000" data="2000"/>
			      </mx:ArrayCollection>
			</mx:ComboBox>
			<mx:Label width="25%" text=" Points" textAlign="right" fontWeight="bold"/>
    	</mx:HBox-->
    	
		<mx:Label text="|" visible="false"/>
		<mx:HBox visible="false">
		<mx:Label text="Label Rotation" textAlign="right" verticalCenter="0"/>
			<mx:HSlider
				id="labelRotate" 
				width="80"
				minimum="0"
				maximum="90"
				value="0"
				snapInterval="1"
				change="{hAxis.labelRotation=labelRotate.value;dc.invalidateDisplayList();}"
				showTrackHighlight="false"
				verticalCenter="-5"/>
		</mx:HBox>
		<mx:Label text="|" visible="false"/>
		<mx:Spacer width="20"/>
		<mx:HBox visible="false">
			<mx:RadioButtonGroup id="layoutGroup" change="{dc.invalidateDisplayList();}"/>
			<mx:RadioButton label="Overlay" group="{layoutGroup}" value="{LineSeriesGroup.MODE_BASELINE}" selected="true"/>
			<mx:RadioButton label="Stack" group="{layoutGroup}" value="{LineSeriesGroup.MODE_STACK_ZERO}"/>
			<mx:RadioButton label="Flow" group="{layoutGroup}" value="{LineSeriesGroup.MODE_STACK_FLOW}"/>
		</mx:HBox>
					
	</mx:HBox>
</mx:TitleWindow>
